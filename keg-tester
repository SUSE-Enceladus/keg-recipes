#!/usr/bin/python3

from datetime import datetime, timezone
from glob import glob
import os
import pprint
import sys
import yaml

from pathlib import Path
from jinja2 import Template



def get_versioned_source_files(src_path, suffix):
  src_files = glob(os.path.join(src_path, '*.yaml'))
  if suffix:
    current_dir = src_path
    for level_down in Path(suffix).parts:
      current_dir = os.path.join(current_dir, level_down)
      src_files += glob(os.path.join(current_dir, '*.yaml'))
  return src_files


def get_source_files(src_path, suffix=None):
  src_files = get_versioned_source_files(src_path, suffix)
  for parent in Path(src_path).parents:
    if parent.name:
      src_files = get_versioned_source_files(parent, suffix) + src_files
  return src_files
  

def rmerge(src, dest):
  for key, value in src.items():
    if isinstance(value, dict):
      node = dest.setdefault(key, {})
      rmerge(value, node)
    else:
      dest[key] = value
  return dest

def parse_yaml_tree(name, root, suffix=None):
  desc_files = get_source_files(os.path.join(root, name), suffix)
  #print(desc_files)
  image_description = {}
  for df in desc_files:
    with open(df, 'r') as f:
      desc_yaml = yaml.safe_load(f.read())
    rmerge(desc_yaml, image_description) 
  return image_description

if len(sys.argv) != 2:
  print("Please specify image to generate.", file=sys.stderr)
  sys.exit(1)

image_data = {
  'generator': 'keg-tester 0.1',
  'timestamp': '{}'.format(datetime.now(timezone.utc))
}
image_data.update(parse_yaml_tree(sys.argv[1], 'images'))

# load profile data
contents = {}
suffix = image_data.get('include-suffix')
for profile_name, profile_data in image_data['profiles'].items():
  profile = {}
  for item, value in profile_data.items():
    if item == 'include':
      for inc in value:
        rmerge(parse_yaml_tree(inc, 'data', suffix), profile)
    else:
        rmerge({item: value}, profile_data)
  image_data['profiles'][profile_name].update(profile)

#pp = pprint.PrettyPrinter(indent=2)
#pp.pprint(image_data)
with open('schemas/{}.kiwi.templ'.format(image_data['schema']), 'r') as templ:
  config_kiwi_templ = Template(templ.read())
config_kiwi = config_kiwi_templ.render(data=image_data)

print(config_kiwi)

